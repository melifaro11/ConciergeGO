import 'dart:convert';

import 'package:conciergego/bloc/events/user_request_event.dart';
import 'package:conciergego/bloc/states/user_request_state.dart';
import 'package:conciergego/models/chat_model.dart';
import 'package:conciergego/models/questions_model.dart';
import 'package:conciergego/models/request_model.dart';
import 'package:conciergego/models/user_profile_model.dart';
import 'package:conciergego/services/firestore/firestore_user_profile.dart';
import 'package:conciergego/services/openai_service.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class UserRequestBloc extends Bloc<UserRequestEvent, UserRequestState> {
  UserRequestBloc() : super(UserRequestInitialState()) {
    on<UserRequestCreatedEvent>(_onUserRequestCreatedEvent);
    on<UserRequestCancelledEvent>(_onUserRequestCancelledEvent);
    on<UserRequestQuestionDoneEvent>(_onUserRequestQuestionDoneEvent);
    on<UserRequestConfirmDoneEvent>(_onUserRequestConfirmDoneEvent);
  }

  /// Request canceled event
  void _onUserRequestCancelledEvent(
    UserRequestCancelledEvent event,
    Emitter<UserRequestState> emitter,
  ) {
    emitter(UserRequestInitialState());
  }

  /// Request confirmed by user
  Future<void> _onUserRequestConfirmDoneEvent(
    UserRequestConfirmDoneEvent event,
    Emitter<UserRequestState> emitter,
  ) async {
    try {
      final request = RequestModel(
        userUid: event.userUid,
        request: event.request,
      );

      debugPrint('Publish request: $request');

      UserProfileFirestoreService().publishRequest(request);

      emitter(UserRequestInitialState());
    } catch (e) {
      emitter(
        UserRequestErrorState("Error publishing request: ${e.toString()}"),
      );
    }
  }

  Future<void> _onUserRequestQuestionDoneEvent(
    UserRequestQuestionDoneEvent event,
    Emitter<UserRequestState> emitter,
  ) async {
    emitter(UserRequestCreatedState(event.request));

    String requestStr =
        "Nationality: ${event.userProfile.baseInfo.nationality ?? "not specified"}\n";
    requestStr += buildPreferences(event.userProfile.preferences);

    requestStr += "Additional user info:\n";

    for (int i = 0; i < event.questions.length; i++) {
      requestStr += "${event.questions[i]}: ${event.answers[i]}\n";
    }

    // For debug
    //emitter(UserRequestConfirmState(request: "Here is your request generated by GPT"));

    try {
      final result = await OpenAIService().chatRequest(
        messages: [MessageModel(content: requestStr, role: "user")],
        model: "gpt-4",
        instructions:
            " You are an assistant of the service for tourists and foreigners."
            " Your goal is to analyze the client's request, their profile and"
            " additional information, and to write a request document for the"
            " performer. The request should list all tasks point by point,"
            " indicating information important for a specific task (indication"
            " of time, place, etc.). Use formal language. In the response, send"
            " only the request document. User profile:\n$requestStr",
        temperature: 0.2,
      );

      emitter(UserRequestConfirmState(request: result.content));
    } on OpenAIServiceException catch (error) {
      emitter(UserRequestErrorState(error.message));
    } catch (e) {
      emitter(UserRequestErrorState(e.toString()));
    }
  }

  void _onUserRequestCreatedEvent(
    UserRequestCreatedEvent event,
    Emitter<UserRequestState> emitter,
  ) async {
    emitter(UserRequestCreatedState(event.request));

    String profileStr =
        "Nationality: ${event.userProfile.baseInfo.nationality ?? "not specified"}\n";
    profileStr += buildPreferences(event.userProfile.preferences);

    try {
      final result = await OpenAIService().chatRequest(
        messages: [
          MessageModel(content: "User request: ${event.request}", role: "user"),
        ],
        model: "gpt-4",
        temperature: 0.2,
        instructions:
            " You are an assistant of the service for tourists and foreigners."
            " Your goal is to analyze the client's request and make a list"
            " of questions to clarify the details necessary to fulfill"
            " the request. Check user profile to obtain additional information."
            " Ask only the most necessary questions necessary"
            " to find out the time (terms), location, budget, etc."
            " Output the result in JSON format, creating an array of questions"
            " 'questions'. Answer only JSON, no additional text."
            " User profile:\n\n$profileStr",
      );

      try {
        final QuestionsModel questionsModel = QuestionsModel.fromJson(
          jsonDecode(result.content),
        );

        emitter(
          UserRequestQuestionsState(
            request: event.request,
            questions: questionsModel.questions,
          ),
        );
      } catch (e) {
        emitter(UserRequestErrorState("Error parsing GPT response"));
      }

      // For debug
      // emitter(
      //   UserRequestQuestionsState(
      //     request: event.request,
      //     questions: ["Question 1", "Question 2", "Question 3", "Question 4"],
      //   ),
      // );
    } on OpenAIServiceException catch (error) {
      emitter(UserRequestErrorState(error.message));
    } catch (e) {
      emitter(UserRequestErrorState(e.toString()));
    }
  }

  String buildPreferences(UserPreferencesModel userPreferences) {
    String preferences = "";

    preferences +=
        "Accommodation preference: ${userPreferences.accommodationPreference ?? "not specified"}\n";
    preferences +=
        "Destination transport preference: ${userPreferences.destinationTransportPreference ?? "not specified"}\n";
    preferences +=
        "Flight preference: ${userPreferences.flightPreference ?? "not specified"}\n";
    preferences +=
        "Frequent flyer memberships: ${userPreferences.frequentFlyerMemberships ?? "not specified"}\n";
    preferences +=
        "Hotel category preference: ${userPreferences.hotelCategoryPreference ?? "not specified"}\n";
    preferences +=
        "Hotel loyalty memberships: ${userPreferences.hotelLoyaltyMemberships ?? "not specified"}\n";
    preferences +=
        "Preferred airline and class: ${userPreferences.preferredAirlineAndClass ?? "not specified"}\n";
    preferences +=
        "Tour preference: ${userPreferences.tourPreference ?? "not specified"}\n";
    preferences +=
        "Travel companion: ${userPreferences.travelCompanion ?? "not specified"}\n";
    preferences +=
        "Traveler type: ${userPreferences.travelerType ?? "not specified"}\n";
    preferences +=
        "Travel frequency: ${userPreferences.travelFrequency ?? "not specified"}\n";

    return preferences;
  }
}
